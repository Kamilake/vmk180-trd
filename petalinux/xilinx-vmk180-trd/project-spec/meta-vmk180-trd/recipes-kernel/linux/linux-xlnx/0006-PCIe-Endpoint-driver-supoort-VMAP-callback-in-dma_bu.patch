From 70af3e697c31e374dc6159e4df241e2b60238534 Mon Sep 17 00:00:00 2001
From: thippesw <thippesw@xilinx.com>
Date: Sun, 3 Apr 2022 08:13:01 -0600
Subject: [PATCH] PCIe Endpoint driver supoort VMAP callback in dma_buf_ops

---
 drivers/misc/xilinx_pci_endpoint.c | 63 +++++++++++++++++++++---------
 1 file changed, 44 insertions(+), 19 deletions(-)

diff --git a/drivers/misc/xilinx_pci_endpoint.c b/drivers/misc/xilinx_pci_endpoint.c
index 2d5275181b3c..64243afa79dc 100644
--- a/drivers/misc/xilinx_pci_endpoint.c
+++ b/drivers/misc/xilinx_pci_endpoint.c
@@ -112,6 +112,8 @@
 #define MAP_DMA_BUFF		  0x1e
 #define UNMAP_DMA_BUFF            0x1f
 #define READ_SIG		  0x20
+#define NUM_DMA_BUF		  0x21
+
 #define WIDTH_SHIFT               0x0
 #define WIDTH_MASK                0xFFFF
 #define HEIGHT_SHIFT              16
@@ -155,7 +157,6 @@
 #define WRITE_BUF_HIGH_OFFSET     0xFFFF0000
 #define NUM_BUFFERS		3
 
-int active_index;
 /**
  * _PGPROT_NONCACHED    : vm_page_prot value when ((sync_mode & SYNC_MODE_MASK)
  *			== SYNC_MODE_NONCACHED)
@@ -262,7 +263,9 @@ struct pciep_driver_data {
 	int host_done_irq;
 	int read_req;
     	int fd[NUM_BUFFERS];	/* fd */
-   	int fd_inuse[NUM_BUFFERS]
+   	int fd_inuse[NUM_BUFFERS];
+	int num_dma_buf;
+	int active_index;
 };
 
 struct pciep_alloc_dma_buf {
@@ -452,7 +455,6 @@ static int pciep_mmap(struct dma_buf *dmabuf,
 			struct vm_area_struct *vma)
 {
 	struct pciep_driver_data *this = dmabuf->priv;
-	size_t size = vma->vm_end - vma->vm_start;
 	void *virt;
 	dma_addr_t phys;
 
@@ -496,7 +498,7 @@ static int pciep_dmabuf_import(struct pciep_driver_data *this,
 		dbuf = dma_buf_get(args.dbuf_fd);
 		if (IS_ERR(dbuf)) {
 			dev_err(this->dma_dev, "failed to get dmabuf\n");
-			ret -1;
+			ret = -1;
 			goto err;
 		}
 		dbuf_attach = dma_buf_attach(dbuf, this->dma_dev);
@@ -607,7 +609,7 @@ static int pciep_dmabuf_free(struct pciep_driver_data *this, char __user *argp)
 	dma_addr_t phys;
 	int i;
 
-	for (i = 0; i < NUM_BUFFERS; i++) {
+	for (i = 0; i < this->num_dma_buf; i++) {
 		virt = this->read_virt_addr[i];
 		phys = this->read_phys_addr[i];
 		dma_free_coherent(this->dma_dev, this->alloc_size,
@@ -621,6 +623,14 @@ static void pciep_release(struct dma_buf *dmabuf)
 {
 
 }
+static int pciep_dma_buf_vmap(struct dma_buf *dmabuf, struct dma_buf_map *map)
+{
+	struct pciep_driver_data *this = dmabuf->priv;
+
+	dma_buf_map_set_vaddr(map, this->read_virt_addr[this->active_index]);
+
+	return 0;
+}
 
 static const struct dma_buf_ops pciep_dma_buf_ops = {
 	.attach = pciep_dma_buf_attach,
@@ -628,6 +638,7 @@ static const struct dma_buf_ops pciep_dma_buf_ops = {
 	.map_dma_buf = pciep_map_dma_buf,
 	.unmap_dma_buf = pciep_unmap_dma_buf,
 	.mmap = pciep_mmap,
+	.vmap = pciep_dma_buf_vmap,
 	.release = pciep_release,
 };
 
@@ -643,19 +654,19 @@ static int pciep_dmabuf_map(struct pciep_driver_data *this, char __user *argp)
 	int i; 
 	int fd;
 
-	for (i = 0; i < NUM_BUFFERS; i++) {
+	for (i = 0; i < this->num_dma_buf; i++) {
 		if (!this->fd_inuse[i]) {
 			fd = this->fd[i];
 			this->fd_inuse[i] = 1;
 			/* Flag to assign array of read phys addre */
-			active_index = i;
+			this->active_index = i;
 			break;
 		}
 	}
-	/* if i == NUM_BUFFERS, it means all buffers are used
+	/* if i == num_dma_buf, it means all buffers are used
 	 * so return error.
 	 */
-	if (i == NUM_BUFFERS) {
+	if (i == this->num_dma_buf) {
 		return -EFAULT;
 	}
 
@@ -681,7 +692,7 @@ static int pciep_dmabuf_unmap(struct pciep_driver_data *this, char __user *argp)
 	if (copy_from_user(&bp, argp, sizeof(bp)))
 		return -EFAULT;
 	
-	for (i = 0; i < NUM_BUFFERS; i++) {
+	for (i = 0; i < this->num_dma_buf; i++) {
 		if (this->fd[i] == bp.fd) {
 			this->fd_inuse[i] = 0;
 			break;
@@ -700,18 +711,16 @@ static int pciep_dmabuf_alloc(struct pciep_driver_data *this, char __user *argp)
 {
 	struct pciep_alloc_dma_buf bp;
 	struct dma_buf_export_info exp_info[3] = { };
-	int err;
 	int i,j;
 	void *virt;
 	dma_addr_t phys;
 	struct dma_buf *dmabuf;
 	int fd;
-
 	if (copy_from_user(&bp, argp, sizeof(bp)))
 		return -EFAULT;
 
 	/* allocate read buffer */
-	for (i = 0; i < NUM_BUFFERS; i++) {
+	for (i = 0; i < this->num_dma_buf; i++) {
 		virt = dma_alloc_coherent(this->dma_dev, bp.size,
 				&phys, GFP_KERNEL);
 		if (IS_ERR_OR_NULL(virt)) {
@@ -753,16 +762,16 @@ static int pciep_dmabuf_alloc(struct pciep_driver_data *this, char __user *argp)
 err_export:
 	virt = this->read_virt_addr[i];
 	phys = this->read_phys_addr[i];
-	this->read_virt_addr[i] = NULL;
-	this->read_phys_addr[i] = NULL;
+	this->read_virt_addr[i] = 0;
+	this->read_phys_addr[i] = 0;
 	dma_free_coherent(this->dma_dev, this->alloc_size,
 			virt, phys);
 err_alloc:
 	for (j = i-1; j >= 0; j--) {
 		virt = this->read_virt_addr[j];
 		phys = this->read_phys_addr[j];
-		this->read_virt_addr[j] = NULL;
-		this->read_phys_addr[j] = NULL;
+		this->read_virt_addr[j] = 0;
+		this->read_phys_addr[j] = 0;
 		dma_free_coherent(this->dma_dev, this->alloc_size,
 				virt, phys);
 	}
@@ -889,6 +898,12 @@ static long pciep_driver_file_ioctl(struct file *file, unsigned int cmd,
 	   		value = reg_read(this, PCIRC_READ_SIG);
 			ret = copy_to_user((u32 *) arg, &value, sizeof(value));
 	   		return ret;
+
+	case NUM_DMA_BUF:
+                        ret = copy_from_user(&value1, (u64 *) arg, sizeof(value1));
+			this->num_dma_buf = value1;
+                        return ret;
+
  
 	default:
 			return -ENOTTY;
@@ -913,7 +928,7 @@ static ssize_t pciep_driver_file_read(struct file *file, char __user *buff,
 	/* check the size */
 	if (count <= 0)
 		return -EINVAL;
-    reg_write(this, PCIEP_READ_BUFFER_ADDR, this->read_phys_addr[active_index]);
+    reg_write(this, PCIEP_READ_BUFFER_ADDR, this->read_phys_addr[this->active_index]);
     reg_write(this, PCIEP_READ_BUFFER_SIZE, count);
     value = reg_read(this, PCIEP_READ_BUFFER_READY);
     value |= SET_BUFFER_RDY;
@@ -1152,7 +1167,6 @@ static int pciep_platform_driver_probe(struct platform_device *pdev)
 	struct pciep_driver_data *driver_data;
 	struct device_node *node = pdev->dev.of_node;
 	struct resource *res;
-	int status;
 	int ret;
 	u32 size=4096;
 	char channel[5];
@@ -1294,6 +1308,16 @@ static void __exit pciep_module_exit(void)
 	ida_destroy(&pciep_device_ida);
 }
 
+/**
+* pciep_devnode() - To provide permissions to non-root user
+*/
+static char *pciep_devnode(struct device *dev, umode_t *mode)
+{
+       if (mode)
+          *mode = 0666; /* or whatever permissions you want */
+       return NULL; /* could override /dev name here too */
+}
+
 /**
  * pciep_module_init()
  */
@@ -1317,6 +1341,7 @@ static int __init pciep_module_init(void)
 		pciep_sys_class = NULL;
 		goto failed;
 	}
+	pciep_sys_class->devnode = pciep_devnode;
 	retval = platform_driver_register(&pciep_platform_driver);
 	if (retval)
 		pr_err("%s: couldn't register platform driver\n", DRIVER_NAME);
-- 
2.17.1

